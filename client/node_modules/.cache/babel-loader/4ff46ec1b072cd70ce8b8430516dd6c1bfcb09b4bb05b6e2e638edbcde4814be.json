{"ast":null,"code":"var _jsxFileName = \"/Users/laviniaguseth/Documents/my-full-stack-app/my-full-stack-app/client/src/withdraw.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { UserContext } from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Withdraw() {\n  _s();\n  const [amount, setAmount] = useState('');\n  const [status, setStatus] = useState('');\n  const [balance, setBalance] = useState(0);\n  const [accountType, setAccountType] = useState(''); // New state for account type\n  const ctx = useContext(UserContext);\n  useEffect(() => {\n    // Fetch the current balance and account type from the API when the component mounts\n    const fetchAccountDetails = async () => {\n      try {\n        const response = await axios.get(`/api/account/${ctx.users[0]._id}`); // Assuming the user has an ID\n        setBalance(response.data.balance);\n        setAccountType(response.data.accountType); // Set the account type\n      } catch (err) {\n        console.error('Error fetching account details:', err);\n      }\n    };\n    fetchAccountDetails();\n  }, [ctx.users]);\n  const validate = (field, label) => {\n    if (!field) {\n      setStatus(`Error: ${label} is required`);\n      setTimeout(() => setStatus(''), 3000);\n      return false;\n    }\n    return true;\n  };\n  const handleWithdraw = async event => {\n    event.preventDefault();\n    if (!validate(amount, 'amount')) return;\n    const numAmount = parseFloat(amount);\n    if (isNaN(numAmount) || numAmount <= 0) {\n      setStatus('Error: Enter a valid positive number');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n    if (numAmount > balance) {\n      setStatus('Error: Insufficient balance');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    // Check against account-specific withdrawal limits\n    if (accountType === 'Basic' && numAmount > 500) {\n      setStatus('Error: Basic accounts have a withdrawal limit of $500 per transaction');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n    if (accountType === 'Premium' && numAmount > 1000) {\n      setStatus('Error: Premium accounts have a withdrawal limit of $1000 per transaction');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    // Add additional checks as needed for other account types\n\n    try {\n      const response = await axios.post('/api/withdraw', {\n        userId: ctx.users[0]._id,\n        // Assuming the user has an ID\n        amount: numAmount\n      });\n      if (response.data.success) {\n        const newBalance = response.data.newBalance;\n        setBalance(newBalance);\n        setStatus(`Withdrawal successful! Your new balance is $${newBalance.toFixed(2)}`);\n      } else {\n        setStatus(`Error: ${response.data.message}`);\n      }\n    } catch (err) {\n      console.error('Error processing withdrawal:', err);\n      setStatus('Error: Server error');\n      setTimeout(() => setStatus(''), 3000);\n    }\n    setAmount('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container d-flex justify-content-center align-items-center\",\n    style: {\n      minHeight: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header bg-primary text-white text-center\",\n          children: \"Withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [status && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-info\",\n            role: \"alert\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"Account Type: \", accountType]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"Current Balance: $\", balance.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleWithdraw,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"withdrawAmount\",\n                className: \"form-label\",\n                children: \"Withdraw Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                className: \"form-control\",\n                id: \"withdrawAmount\",\n                placeholder: \"Enter amount\",\n                value: amount,\n                onChange: e => setAmount(e.currentTarget.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary w-100\",\n              children: \"Withdraw\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Withdraw, \"WmizFdWMlSbc62kirFo+ygQU77o=\");\n_c = Withdraw;\nexport default Withdraw;\nvar _c;\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"names":["React","useContext","useState","useEffect","axios","UserContext","jsxDEV","_jsxDEV","Withdraw","_s","amount","setAmount","status","setStatus","balance","setBalance","accountType","setAccountType","ctx","fetchAccountDetails","response","get","users","_id","data","err","console","error","validate","field","label","setTimeout","handleWithdraw","event","preventDefault","numAmount","parseFloat","isNaN","post","userId","success","newBalance","toFixed","message","className","style","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","role","onSubmit","htmlFor","type","id","placeholder","value","onChange","e","currentTarget","_c","$RefreshReg$"],"sources":["/Users/laviniaguseth/Documents/my-full-stack-app/my-full-stack-app/client/src/withdraw.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { UserContext } from './context';\n\nexport function Withdraw() {\n  const [amount, setAmount] = useState('');\n  const [status, setStatus] = useState('');\n  const [balance, setBalance] = useState(0);\n  const [accountType, setAccountType] = useState(''); // New state for account type\n  const ctx = useContext(UserContext);\n\n  useEffect(() => {\n    // Fetch the current balance and account type from the API when the component mounts\n    const fetchAccountDetails = async () => {\n      try {\n        const response = await axios.get(`/api/account/${ctx.users[0]._id}`); // Assuming the user has an ID\n        setBalance(response.data.balance);\n        setAccountType(response.data.accountType); // Set the account type\n      } catch (err) {\n        console.error('Error fetching account details:', err);\n      }\n    };\n\n    fetchAccountDetails();\n  }, [ctx.users]);\n\n  const validate = (field, label) => {\n    if (!field) {\n      setStatus(`Error: ${label} is required`);\n      setTimeout(() => setStatus(''), 3000);\n      return false;\n    }\n    return true;\n  };\n\n  const handleWithdraw = async (event) => {\n    event.preventDefault();\n\n    if (!validate(amount, 'amount')) return;\n\n    const numAmount = parseFloat(amount);\n    if (isNaN(numAmount) || numAmount <= 0) {\n      setStatus('Error: Enter a valid positive number');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    if (numAmount > balance) {\n      setStatus('Error: Insufficient balance');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    // Check against account-specific withdrawal limits\n    if (accountType === 'Basic' && numAmount > 500) {\n      setStatus('Error: Basic accounts have a withdrawal limit of $500 per transaction');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    if (accountType === 'Premium' && numAmount > 1000) {\n      setStatus('Error: Premium accounts have a withdrawal limit of $1000 per transaction');\n      setTimeout(() => setStatus(''), 3000);\n      return;\n    }\n\n    // Add additional checks as needed for other account types\n\n    try {\n      const response = await axios.post('/api/withdraw', {\n        userId: ctx.users[0]._id, // Assuming the user has an ID\n        amount: numAmount,\n      });\n\n      if (response.data.success) {\n        const newBalance = response.data.newBalance;\n        setBalance(newBalance);\n        setStatus(`Withdrawal successful! Your new balance is $${newBalance.toFixed(2)}`);\n      } else {\n        setStatus(`Error: ${response.data.message}`);\n      }\n    } catch (err) {\n      console.error('Error processing withdrawal:', err);\n      setStatus('Error: Server error');\n      setTimeout(() => setStatus(''), 3000);\n    }\n\n    setAmount('');\n  };\n\n  return (\n    <div className=\"container d-flex justify-content-center align-items-center\" style={{ minHeight: '100vh' }}>\n      <div className=\"col-md-6\">\n        <div className=\"card\">\n          <div className=\"card-header bg-primary text-white text-center\">\n            Withdraw\n          </div>\n          <div className=\"card-body\">\n            {status && (\n              <div className=\"alert alert-info\" role=\"alert\">\n                {status}\n              </div>\n            )}\n            <h5>Account Type: {accountType}</h5> {/* Display account type */}\n            <h5>Current Balance: ${balance.toFixed(2)}</h5>\n            <form onSubmit={handleWithdraw}>\n              <div className=\"mb-3\">\n                <label htmlFor=\"withdrawAmount\" className=\"form-label\">Withdraw Amount</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"withdrawAmount\"\n                  placeholder=\"Enter amount\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.currentTarget.value)}\n                />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary w-100\">\n                Withdraw\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Withdraw;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}